
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 20 18:01:01 CDT 2020
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 20 18:01:01 CDT 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\013\002\000\002\003\005\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\006\000\002" +
    "\005\006\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\010\004\000\002\010\006\000\002\010\003" +
    "\000\002\006\007\000\002\007\003\000\002\007\005\000" +
    "\002\011\010\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\026\012\005\013\012\014\006\015\024\016" +
    "\013\017\025\020\023\021\015\022\004\025\014\001\002" +
    "\000\004\007\062\001\002\000\004\023\061\001\002\000" +
    "\004\023\056\001\002\000\010\004\ufff3\006\ufff3\010\ufff3" +
    "\001\002\000\004\004\ufffe\001\002\000\010\004\ufff9\006" +
    "\ufff9\010\ufff9\001\002\000\004\007\050\001\002\000\004" +
    "\007\042\001\002\000\014\004\uffef\006\uffef\010\uffef\013" +
    "\012\023\036\001\002\000\004\007\031\001\002\000\010" +
    "\004\ufff2\006\ufff2\010\ufff2\001\002\000\010\004\ufff8\006" +
    "\ufff8\010\ufff8\001\002\000\030\002\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022" +
    "\uffff\025\uffff\001\002\000\004\004\ufffb\001\002\000\030" +
    "\002\030\012\005\013\012\014\006\015\024\016\013\017" +
    "\025\020\023\021\015\022\004\025\014\001\002\000\004" +
    "\004\ufffa\001\002\000\004\023\026\001\002\000\010\004" +
    "\ufff4\006\ufff4\010\ufff4\001\002\000\004\004\ufffc\001\002" +
    "\000\030\002\001\012\001\013\001\014\001\015\001\016" +
    "\001\017\001\020\001\021\001\022\001\025\001\001\002" +
    "\000\004\002\000\001\002\000\004\024\032\001\002\000" +
    "\004\006\033\001\002\000\004\024\034\001\002\000\004" +
    "\010\035\001\002\000\010\004\uffeb\006\uffeb\010\uffeb\001" +
    "\002\000\010\004\ufff1\006\ufff1\010\ufff1\001\002\000\004" +
    "\005\040\001\002\000\004\023\041\001\002\000\010\004" +
    "\ufff0\006\ufff0\010\ufff0\001\002\000\022\012\005\013\012" +
    "\014\006\016\013\017\025\021\015\022\004\025\014\001" +
    "\002\000\006\006\046\010\uffed\001\002\000\004\010\045" +
    "\001\002\000\010\004\ufff5\006\ufff5\010\ufff5\001\002\000" +
    "\022\012\005\013\012\014\006\016\013\017\025\021\015" +
    "\022\004\025\014\001\002\000\004\010\uffec\001\002\000" +
    "\004\024\051\001\002\000\004\010\052\001\002\000\004" +
    "\023\053\001\002\000\012\004\uffee\005\uffee\006\uffee\010" +
    "\uffee\001\002\000\004\004\055\001\002\000\030\002\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\025\ufffd\001\002\000\004\005\057" +
    "\001\002\000\004\023\060\001\002\000\010\004\ufff6\006" +
    "\ufff6\010\ufff6\001\002\000\010\004\ufff7\006\ufff7\010\ufff7" +
    "\001\002\000\004\024\063\001\002\000\004\010\064\001" +
    "\002\000\010\004\uffea\006\uffea\010\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\022\002\021\003\017\004\007\005\020\006" +
    "\016\010\010\011\006\012\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\026\004\007\005\020\006" +
    "\016\010\010\011\006\012\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\042\006\016\007\043\010" +
    "\010\011\006\012\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\042\006\016\007" +
    "\046\010\010\011\006\012\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   
    
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
         if (info instanceof java_cup.runtime.Symbol) {
            
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
             if (s.left >= 0) {                
                  m.append(" in line "+(s.left+1));   
               	 
               	  if (s.right >= 0)                    
                 	 m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



 public String x = "" ; 
 
 public String pl(String pr){
 	if(pr.equals("parrafo"))
 		return "p";
 	return "label";	
 }
 
 public String y = "" ;
 
 public String ctext(String tx){
 	return tx.replace("\"","");
 }
 
 public String titulo = "" ;
 
 
 public void pagina(String x){
 	File fold=new File("Pagina.html");
	fold.delete();
	File fnew=new File("Pagina.html");
	String source = x;
	System.out.println(source);
	
	try {
       FileWriter f2 = new FileWriter(fnew, false);
       f2.write(source);
       f2.close();
	} catch (IOException e) {
       e.printStackTrace();
	}           
 }
 
 public String tabla="";
 
 public String creacionTabla(String digito, String digito2){
 	String contenido="<table border = \"\">\n";
 	int d=Integer.parseInt(digito);
 	int d2=Integer.parseInt(digito2);
 	
 	for(int i=0; i<d; i++ ){
 		for(int j=0; j<d2; j++){
 			contenido=contenido.concat("<td>subitem"+j+"</td>\n");
 			if(j==d2-1){
 				contenido=contenido.concat("</tr>\n");
 			}
 		}
 	}
 	contenido=contenido.concat("</table>");
 	return contenido;
 }
 
 public String form = "";
 
 public String form (String digito){
 	String formulario = "<br>\n<form>\n";
 	switch (digito) {
 		 
 		 case "1":
 		 	formulario = formulario.concat(" \"Formulario en blanco aqui añade tu codigo\" </form><br>");
		 break;
 		 
 		 case "2":
 		 	for (int i = 0; i<3; i++) {
 		 		formulario = formulario.concat("<label>nombre del campo</label><br>\n<input type=\"text\"><br>\n");
 		 	}
 		 	formulario = formulario.concat ("<br>\n<input type=\"submit\" value=\"Submit\">\n</form><br>"); 
 		 break;
 		 
 		 case "3":
 		 	
 		 	for (int i = 0; i<4; i++) {
 		 		int op = i+1;
 		 		formulario = formulario.concat("<input type=\"radio\" id=\"idt "+ op +"\" name=\"idn\" value=\"opcion "+ op +"\">");
 		 		formulario = formulario.concat("\n<label for=\"idt"+op+"\">opcion "+op+"</label><br>\n");
 		 	}
 		 	formulario = formulario.concat ("<br>\n<input type=\"submit\" value=\"Submit\">\n</form><br>"); 
 		 break;
 		 
 		 case "4":
 		 	for (int i = 0; i<4; i++) {
 		 		int op = i+1;
 		 		formulario = formulario.concat("<input type=\"checkbox\" id=\"idt "+ op +"\" name=\"idn "+ op +"value=\"opcion "+ op +"\">");
 		 		formulario = formulario.concat("\n<label for=\"idt"+op+"\">opcion "+op+"</label><br>\n");
 		 	}
 		 	formulario = formulario.concat ("<br>\n<input type=\"submit\" value=\"Submit\">\n</form><br>"); 
 		 break;
 		 
 		 case "5":
 		 	formulario = formulario.concat(creacionTabla("3","3"));
 		 	formulario = formulario.concat ("<br>\n<input type=\"submit\" value=\"Submit\">\n</form><br>"); 
 		 break;
 		 
 		 case "6":
 		 	for (int i = 0; i<3; i++) {
 		 		formulario = formulario.concat("<label>nombre del campo</label><br>\n<input type=\"text\"><br>\n");
 		 	}
 		 	
 		 	for (int i = 0; i<2; i++) {
 		 		int op = i+1;
 		 		formulario = formulario.concat("<input type=\"radio\" id=\"idt "+ op +"\" name=\"idn\" value=\"opcion "+ op +"\">\n");
 		 		formulario = formulario.concat("\n<label for=\"idt"+op+"\">opcion "+op+"</label><br>\n");
 		 	}
 		 	
 		 	formulario = formulario.concat ("<br>\n<input type=\"submit\" value=\"Submit\">\n</form><br>"); 
 		 	
 		 break;
 		 
 	}
 	return formulario;
 }
 
 public String validacionImg(String texto){
	if(texto.contains(".jpg") || texto.contains(".jpeg") || texto.contains(".png"))
		return texto;
 	return "Formato de imagen no valido";
 }
 
 public String validacionVin(String texto){
 	String []algo=texto.split("\\.");
 	if(algo.length>2){
 		return texto;
 	}
 	return "URL no valida";
 }
 

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // F ::= FORMULARIO LPAREN DIGITO RPAREN 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 form = form(d) ; RESULT = form	; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T ::= TABLA LPAREN DIGITO COMA DIGITO RPAREN 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tabla=creacionTabla(d,d2) ; RESULT =tabla ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // H ::= A COMA H 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a + h; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // H ::= A 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= ENCABEZADO LPAREN DIGITO RPAREN TEXTO 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tx = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "\n<h"+ d +">"+ ctext(tx) +"</h"+ d +">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // P ::= PR 
            {
              String RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 y=pl(pr); RESULT = "\n<"+ y +">\n</"+ y +">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // P ::= PR E UNION TEXTO 
            {
              String RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tx = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 y=pl(pr); RESULT = "\n<"+ y +">"+ e + ctext(tx) +"\n</"+ y +">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // P ::= PR TEXTO 
            {
              String RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tx = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 y=pl(pr); RESULT = "\n<"+ y +">"+ ctext(tx) +"\n</"+ y +">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // A ::= F 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =f	; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // A ::= T 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =t	; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // A ::= ATEXTO 
            {
              String RESULT =null;
		 RESULT = "\n<textarea></textarea>"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // A ::= CONTENEDOR LPAREN H RPAREN 
            {
              String RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "\n<div>"+ h +"\n</div>"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // A ::= VINCULO TEXTO UNION TEXTO 
            {
              String RESULT =null;
		int txleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tx = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "\n<a href="+ validacionVin(tx) +">"+ ctext(t) +"</a>"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // A ::= IMAGEN TEXTO 
            {
              String RESULT =null;
		int txleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tx = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "\n<img src="+ validacionImg(tx) +">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // A ::= E 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // A ::= P 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= FIN 
            {
              String RESULT =null;
		 x="<!DOCTYPE html>\n<html>\n<head>\n<title>\n" + titulo + "\n</title>\n</head>\n\n<body>\n"+ x +"\n</body>\n\n</html>"; 
   		  	 pagina(x);
   		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= A 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= TITULO TEXTO 
            {
              String RESULT =null;
		int txleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tx = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 titulo=ctext(tx) ; RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= S NT$0 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 x+=s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

